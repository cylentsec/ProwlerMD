{
  "_metadata": {
    "description": "Mapping of Prowler AWS finding titles to Proof of Concept commands/instructions",
    "version": "1.0",
    "last_updated": "2025-09-29"
  },
  "Check if SQS queues have policy set as Public": "aws sqs get-queue-attributes --queue-url <QUEUE_URL> --attribute-names Policy\naws sqs list-queues | jq '.QueueUrls[]'",
  "Ensure only hardware MFA is enabled for the root account": "# Check root account MFA devices\naws iam get-account-summary | jq '.SummaryMap.AccountMFAEnabled'\naws iam list-virtual-mfa-devices --assignment-status Assigned | jq '.VirtualMFADevices[] | select(.User.UserName == \"root\")'",
  "Find secrets in CloudFormation outputs": "# Manual: Review CloudFormation stack outputs for sensitive data\naws cloudformation describe-stacks --query 'Stacks[].Outputs' | jq '.[] | .[] | select(.OutputValue | test(\"(?i)(key|secret|password|token)\"))'\naws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --query 'StackSummaries[].StackName' --output text | head -5 | xargs -I {} aws cloudformation describe-stacks --stack-name {} --query 'Stacks[0].Outputs'",
  "Find secrets in Lambda functions variables.": "# Check Lambda environment variables for potential secrets\naws lambda list-functions --query 'Functions[].FunctionName' --output text | head -5 | xargs -I {} aws lambda get-function-configuration --function-name {} --query '{FunctionName:\"{}\",Environment:Environment.Variables}' | jq 'select(.Environment != null) | .Environment | to_entries[] | select(.key | test(\"(?i)(key|secret|password|token|api)\"))'\naws lambda list-functions --query 'Functions[:3].{Name:FunctionName,Environment:Environment}' | jq '.[] | select(.Environment.Variables) | .Environment.Variables | to_entries[]'",
  "ECS containers should be limited to read-only access to root filesystems": "# Check ECS task definitions for read-only root filesystem\naws ecs list-task-definition-families --query 'families[]' --output text | head -5 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[].{name:name,readonlyRootFilesystem:readonlyRootFilesystem}' | jq '.[] | select(.readonlyRootFilesystem != true)'\naws ecs list-task-definitions --query 'taskDefinitionArns[]' --output text | head -3 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[?readonlyRootFilesystem!=`true`].name'",
  "ECS task definitions containers should have a logging configuration": "# Check ECS task definitions for logging configuration\naws ecs list-task-definition-families --query 'families[]' --output text | head -5 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[].{name:name,logConfiguration:logConfiguration}' | jq '.[] | select(.logConfiguration == null)'\naws ecs list-task-definitions --query 'taskDefinitionArns[]' --output text | head -3 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[?logConfiguration==null].name'",
  "Ensure IAM AWS-Managed policies that allow full \"*:*\" administrative privileges are not attached": "# List users/roles with AdministratorAccess policy\naws iam list-entities-for-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess\n# Check for other broad admin policies\naws iam list-policies --scope AWS --query 'Policies[?contains(PolicyName, `Admin`)].{Name:PolicyName,Arn:Arn}'",
  "Ensure IAM Roles do not have AdministratorAccess policy attached": "# Check roles with AdministratorAccess\naws iam list-entities-for-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --entity-filter Role\n# List all role policies\naws iam list-roles --query 'Roles[].RoleName' --output text | xargs -I {} aws iam list-attached-role-policies --role-name {}",
  "Ensure IAM Roles do not have ReadOnlyAccess access for external AWS accounts": "# Check roles with ReadOnlyAccess for external accounts\naws iam list-entities-for-policy --policy-arn arn:aws:iam::aws:policy/ReadOnlyAccess --entity-filter Role\naws iam list-roles --query 'Roles[].{Name:RoleName,AssumeRolePolicyDocument:AssumeRolePolicyDocument}' | jq '.[] | select(.AssumeRolePolicyDocument | contains(\"AWS\"))'",
  "Ensure IAM Service Roles prevents against a cross-service confused deputy attack": "# Check service roles for confused deputy protection\naws iam list-roles --query 'Roles[?contains(RoleName, `service`)].{Name:RoleName,AssumeRolePolicyDocument:AssumeRolePolicyDocument}' | jq '.[] | .AssumeRolePolicyDocument | fromjson | .Statement[] | select(.Condition)'",
  "Ensure IAM inline policies that allow full \"*:*\" administrative privileges are not associated to IAM identities": "# Check inline policies for admin privileges\naws iam list-users --query 'Users[].UserName' --output text | xargs -I {} sh -c 'echo \"User: {}\" && aws iam list-user-policies --user-name {} --query PolicyNames --output text'\naws iam list-roles --query 'Roles[].RoleName' --output text | xargs -I {} sh -c 'echo \"Role: {}\" && aws iam list-role-policies --role-name {} --query PolicyNames --output text'",
  "Ensure Instance Metadata Service Version 2 (IMDSv2) is enforced for EC2 instances at the account level to protect against SSRF vulnerabilities.": "# Check IMDSv2 enforcement on instances\naws ec2 describe-instances --query 'Reservations[].Instances[].{InstanceId:InstanceId,MetadataOptions:MetadataOptions}' | jq '.[] | select(.MetadataOptions.HttpTokens != \"required\")'\naws ec2 describe-instance-attribute --instance-id $(aws ec2 describe-instances --query 'Reservations[0].Instances[0].InstanceId' --output text) --attribute instanceMetadataOptions 2>/dev/null",
  "Ensure centralized root credentials management is enabled": "# Check if Organizations centralized root access is enabled\naws organizations describe-organization | jq '.Organization.MasterAccountId'\naws iam get-account-summary | jq '.SummaryMap | {AccountMFAEnabled, UsersQuota, Users}'",
  "Ensure multi-factor authentication (MFA) is enabled for all IAM users that have a console password.": "# Check users with console access but no MFA\naws iam get-credential-report --query 'Content' --output text | base64 -d | grep -v '^user,arn' | awk -F, '$4==\"true\" && $8==\"false\" {print $1}' | head -10\naws iam list-virtual-mfa-devices --assignment-status Assigned | jq '.VirtualMFADevices[].User.UserName'",
  "Ensure no IAM Inline policies allow actions that may lead into Privilege Escalation": "# Check inline policies for privilege escalation actions\naws iam list-users --query 'Users[].UserName' --output text | head -5 | xargs -I {} aws iam get-user-policy --user-name {} --policy-name $(aws iam list-user-policies --user-name {} --query 'PolicyNames[0]' --output text) 2>/dev/null | jq '.PolicyDocument | fromjson | .Statement[] | select(.Action[] | test(\"iam:.*Policy|iam:.*Role|iam:.*User\"))' 2>/dev/null",
  "Ensure that CDKToolkit stacks have a Bootstrap version of 21 or higher to mitigate security risks.": "# Check CDK bootstrap version\naws cloudformation describe-stacks --stack-name CDKToolkit --query 'Stacks[0].Parameters[?ParameterKey==`BootstrapVersion`].ParameterValue' --output text\naws cloudformation list-stacks --query 'StackSummaries[?contains(StackName, `CDK`)].{Name:StackName,Status:StackStatus}'",
  "Ensure that general-purpose bucket policies restrict access to other AWS accounts.": "# Check S3 bucket policies for external account access\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-policy --bucket {} --query Policy --output text 2>/dev/null | jq -r . | grep -E \"[0-9]{12}\" 2>/dev/null || echo \"No policy or external accounts\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-acl --bucket {} --query 'Grants[?Grantee.Type==`Group`]'",
  "Ensure there are no SNS Topics unencrypted": "# Check SNS topic encryption\naws sns list-topics --query 'Topics[].TopicArn' --output text | head -5 | xargs -I {} aws sns get-topic-attributes --topic-arn {} --query 'Attributes.KmsMasterKeyId' --output text\naws sns list-topics --query 'Topics[:3]' | jq '.[] | .TopicArn' | xargs -I {} aws sns get-topic-attributes --topic-arn {}",
  "Amazon EC2 should be configured to use VPC endpoints that are created for the Amazon EC2 service.": "# Check VPC endpoints for EC2 service\naws ec2 describe-vpc-endpoints --query 'VpcEndpoints[?ServiceName==`com.amazonaws.*.ec2`].{VpcId:VpcId,ServiceName:ServiceName,State:State}'\naws ec2 describe-vpcs --query 'Vpcs[].VpcId' --output text | head -3 | xargs -I {} aws ec2 describe-vpc-endpoints --filters Name=vpc-id,Values={}",
  "Check EC2 Instances older than specific days.": "# Check instance launch times (older than 90 days)\naws ec2 describe-instances --query 'Reservations[].Instances[?LaunchTime<=`2023-07-01`].{InstanceId:InstanceId,LaunchTime:LaunchTime,State:State.Name}' --output table\naws ec2 describe-instances --query 'Reservations[].Instances[].{InstanceId:InstanceId,LaunchTime:LaunchTime}' | jq '.[] | select(.LaunchTime < (now - 7776000))'",
  "Check for EC2 Instances with Public IP.": "# List EC2 instances with public IPs\naws ec2 describe-instances --query 'Reservations[].Instances[?PublicIpAddress!=null].{InstanceId:InstanceId,PublicIP:PublicIpAddress,PrivateIP:PrivateIpAddress,State:State.Name}' --output table\naws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[?PublicIpAddress].InstanceId'",
  "Check if API Gateway Stage has a WAF ACL attached.": "# Check API Gateway stages for WAF association\naws apigateway get-rest-apis --query 'items[].{id:id,name:name}' | jq -r '.[] | .id' | head -3 | xargs -I {} aws apigateway get-stages --rest-api-id {} --query 'item[].{stageName:stageName,webAclArn:webAclArn}'\naws apigatewayv2 get-apis --query 'Items[].{ApiId:ApiId,Name:Name}' | jq -r '.[] | .ApiId' | head -3 | xargs -I {} aws apigatewayv2 get-stages --api-id {} 2>/dev/null",
  "Check if API Gateway Stage has client certificate enabled to access your backend endpoint.": "# Check API Gateway client certificate configuration\naws apigateway get-rest-apis --query 'items[].id' --output text | head -3 | xargs -I {} aws apigateway get-stages --rest-api-id {} --query 'item[].{stageName:stageName,clientCertificateId:clientCertificateId}'\naws apigateway get-client-certificates --query 'items[].{certificateId:clientCertificateId,description:description}'",
  "Check if API Gateway Stage has logging enabled.": "# Check API Gateway stage logging configuration\naws apigateway get-rest-apis --query 'items[].id' --output text | head -3 | xargs -I {} aws apigateway get-stages --rest-api-id {} --query 'item[].{stageName:stageName,accessLogSettings:accessLogSettings,methodSettings:methodSettings}'\naws logs describe-log-groups --log-group-name-prefix API-Gateway-Execution-Logs",
  "Check if API Gateway endpoint is public or private.": "# Check API Gateway endpoint configuration\naws apigateway get-rest-apis --query 'items[].{id:id,name:name,endpointConfiguration:endpointConfiguration}' | jq '.[] | select(.endpointConfiguration.types[] == \"PRIVATE\")'\naws apigateway get-rest-apis --query 'items[].{name:name,policy:policy}' | jq '.[] | select(.policy)'  ",
  "Check if API Gateway has configured authorizers at api or method level.": "# Check API Gateway authorizers\naws apigateway get-rest-apis --query 'items[].id' --output text | head -3 | xargs -I {} sh -c 'echo \"API: {}\" && aws apigateway get-authorizers --rest-api-id {} --query \"items[].{name:name,type:type}\"'\naws apigateway get-rest-apis --query 'items[].id' --output text | head -1 | xargs -I {} aws apigateway get-resources --rest-api-id {} --query 'items[].resourceMethods'",
  "Check if API Gateway public endpoint has an authorizer configured.": "# Check public API Gateway endpoints for authorizers\naws apigateway get-rest-apis --query 'items[?endpointConfiguration.types[0]==`EDGE`].{id:id,name:name}' | jq -r '.[] | .id' | head -3 | xargs -I {} aws apigateway get-authorizers --rest-api-id {} --query 'items[].{name:name,type:type,authorizerUri:authorizerUri}'",
  "Check if AWS WAFv2 WebACL logging is enabled": "# Check WAFv2 WebACL logging configuration\naws wafv2 list-web-acls --scope CLOUDFRONT --query 'WebACLs[].{Name:Name,Id:Id}' | jq -r '.[] | .Id' | head -3 | xargs -I {} aws wafv2 get-logging-configuration --resource-arn {} 2>/dev/null || echo \"No logging configured\"\naws wafv2 list-web-acls --scope REGIONAL --query 'WebACLs[].{Name:Name,Id:Id}' | jq -r '.[] | .Id' | head -3 | xargs -I {} aws wafv2 get-logging-configuration --resource-arn {} 2>/dev/null",
  "Check if Application Load Balancer has a WAF ACL attached.": "# Check ALB WAF ACL association\naws elbv2 describe-load-balancers --query 'LoadBalancers[?Type==`application`].{LoadBalancerArn:LoadBalancerArn,LoadBalancerName:LoadBalancerName}' | jq -r '.[] | .LoadBalancerArn' | head -3 | xargs -I {} aws wafv2 get-web-acl-for-resource --resource-arn {} 2>/dev/null || echo \"No WAF associated\"\naws elbv2 describe-load-balancers --query 'LoadBalancers[?Type==`application`].LoadBalancerArn' --output text | head -3",
  "Check if CloudFront distributions are using WAF.": "# Check CloudFront distributions for WAF association\naws cloudfront list-distributions --query 'DistributionList.Items[].{Id:Id,DomainName:DomainName,WebACLId:WebACLId}' | jq '.[] | select(.WebACLId == null or .WebACLId == \"\")'\naws cloudfront list-distributions --query 'DistributionList.Items[?WebACLId==null].{Id:Id,DomainName:DomainName}' --output table",
  "Check if CloudFront distributions have logging enabled.": "# Check CloudFront distribution logging configuration\naws cloudfront list-distributions --query 'DistributionList.Items[].{Id:Id,DomainName:DomainName}' | jq -r '.[] | .Id' | head -5 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.Logging.{Enabled:Enabled,Bucket:Bucket}' 2>/dev/null\naws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output text | head -3 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.Logging.Enabled' --output text 2>/dev/null",
  "Check if CloudFront distributions with S3 origin use OAC.": "# Check CloudFront distributions for Origin Access Control (OAC)\naws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output text | head -3 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.Origins.Items[?contains(DomainName, `s3`)].{DomainName:DomainName,OriginAccessControlId:OriginAccessControlId}' 2>/dev/null\naws cloudfront list-origin-access-controls --query 'OriginAccessControlList.Items[].{Id:Id,Name:Name}'",
  "Check if CloudWatch Log Groups have a retention policy of specific days.": "# Check CloudWatch log group retention policies\naws logs describe-log-groups --query 'logGroups[?retentionInDays==null].{logGroupName:logGroupName,retentionInDays:retentionInDays}' --output table\naws logs describe-log-groups --query 'logGroups[].{Name:logGroupName,Retention:retentionInDays}' | jq '.[] | select(.Retention == null or .Retention > 365)'",
  "Check if CloudWatch log groups are protected by AWS KMS.": "# Check CloudWatch log group KMS encryption\naws logs describe-log-groups --query 'logGroups[].{logGroupName:logGroupName,kmsKeyId:kmsKeyId}' | jq '.[] | select(.kmsKeyId == null)'\naws logs describe-log-groups --query 'logGroups[?kmsKeyId==null].logGroupName' --output text | head -5",
  "Check if DynamoDB table has encryption at rest enabled using CMK KMS.": "# Check DynamoDB table encryption configuration\naws dynamodb list-tables --query 'TableNames[]' --output text | head -5 | xargs -I {} aws dynamodb describe-table --table-name {} --query 'Table.{TableName:TableName,SSEDescription:SSEDescription}' 2>/dev/null\naws dynamodb list-tables --query 'TableNames[]' --output text | head -3 | xargs -I {} aws dynamodb describe-table --table-name {} --query 'Table.SSEDescription.Status' --output text 2>/dev/null",
  "Check if DynamoDB tables are included in a backup plan.": "# Check DynamoDB tables in AWS Backup plans\naws backup list-backup-plans --query 'BackupPlansList[].BackupPlanId' --output text | head -3 | xargs -I {} aws backup get-backup-plan --backup-plan-id {} --query 'BackupPlan.Rules[].Targets[]' | jq '.[] | select(contains(\"dynamodb\"))' 2>/dev/null\naws dynamodb list-tables --query 'TableNames[]' --output text | head -5 | xargs -I {} aws backup list-protected-resources --query 'Results[?ResourceArn==`arn:aws:dynamodb:*:*:table/{}` || contains(ResourceArn, `{}`)]' 2>/dev/null",
  "Check if DynamoDB tables automatically scale capacity with demand.": "# Check DynamoDB auto scaling configuration\naws dynamodb list-tables --query 'TableNames[]' --output text | head -5 | xargs -I {} aws dynamodb describe-table --table-name {} --query 'Table.{TableName:TableName,BillingMode:BillingModeSummary.BillingMode}' 2>/dev/null\naws application-autoscaling describe-scalable-targets --service-namespace dynamodb --query 'ScalableTargets[].{ResourceId:ResourceId,ScalableDimension:ScalableDimension}' --output table",
  "Check if DynamoDB tables have deletion protection enabled.": "# Check DynamoDB table deletion protection\naws dynamodb list-tables --query 'TableNames[]' --output text | head -5 | xargs -I {} aws dynamodb describe-table --table-name {} --query 'Table.{TableName:TableName,DeletionProtectionEnabled:DeletionProtectionEnabled}' 2>/dev/null\naws dynamodb list-tables --query 'TableNames[]' --output text | head -3 | xargs -I {} aws dynamodb describe-table --table-name {} --query 'Table.DeletionProtectionEnabled' --output text 2>/dev/null",
  "Check if DynamoDB tables point-in-time recovery (PITR) is enabled.": "# Check DynamoDB PITR status\naws dynamodb list-tables --query 'TableNames[]' --output text | head -5 | xargs -I {} aws dynamodb describe-continuous-backups --table-name {} --query 'ContinuousBackupsDescription.{TableName:\"{}\",PITRStatus:PointInTimeRecoveryDescription.PointInTimeRecoveryStatus}' 2>/dev/null\naws dynamodb list-tables --query 'TableNames[]' --output text | head -3 | xargs -I {} aws dynamodb describe-continuous-backups --table-name {} --query 'ContinuousBackupsDescription.PointInTimeRecoveryDescription.PointInTimeRecoveryStatus' --output text 2>/dev/null",
  "Check if EBS snapshots exists.": "# Check for EBS snapshots\naws ec2 describe-snapshots --owner-ids self --query 'Snapshots[].{SnapshotId:SnapshotId,VolumeId:VolumeId,StartTime:StartTime,VolumeSize:VolumeSize}' --output table | head -10\naws ec2 describe-volumes --query 'Volumes[].VolumeId' --output text | head -5 | xargs -I {} aws ec2 describe-snapshots --filters Name=volume-id,Values={} --query 'length(Snapshots[])' --output text",
  "Check if EC2 instances are managed by Systems Manager.": "# Check EC2 instances managed by Systems Manager\naws ssm describe-instance-information --query 'InstanceInformationList[].{InstanceId:InstanceId,PlatformType:PlatformType,PlatformVersion:PlatformVersion,AssociationStatus:AssociationStatus}' --output table\naws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[].InstanceId' --output text | head -5 | xargs -I {} aws ssm describe-instance-information --instance-information-filter-list key=InstanceIds,valueSet={} --query 'InstanceInformationList[].InstanceId' 2>/dev/null",
  "Check if ECR Registry has scan on push enabled": "# Check ECR repositories for scan on push\naws ecr describe-repositories --query 'repositories[].{repositoryName:repositoryName,imageScanningConfiguration:imageScanningConfiguration}' | jq '.[] | select(.imageScanningConfiguration.scanOnPush != true)'\naws ecr describe-repositories --query 'repositories[?imageScanningConfiguration.scanOnPush!=`true`].repositoryName' --output text | head -5",
  "Check if ECR image scan found vulnerabilities in the newest image version": "# Check ECR image scan results for vulnerabilities\naws ecr describe-repositories --query 'repositories[].repositoryName' --output text | head -3 | xargs -I {} sh -c 'echo \"Repository: {}\" && aws ecr describe-image-scan-findings --repository-name {} --image-id imageTag=latest --query \"imageScanFindingsSummary.{findingCounts:findingCounts,vulnerabilitySourceUpdatedAt:vulnerabilitySourceUpdatedAt}\" 2>/dev/null || echo \"No scan results\"'\naws ecr describe-repositories --query 'repositories[].repositoryName' --output text | head -5 | xargs -I {} aws ecr list-images --repository-name {} --query 'imageIds[0]' 2>/dev/null",
  "Check if Elastic Load Balancers have deletion protection enabled.": "# Check ELB deletion protection status\naws elbv2 describe-load-balancers --query 'LoadBalancers[].{LoadBalancerName:LoadBalancerName,LoadBalancerArn:LoadBalancerArn}' | jq -r '.[] | .LoadBalancerArn' | head -5 | xargs -I {} aws elbv2 describe-load-balancer-attributes --load-balancer-arn {} --query 'Attributes[?Key==`deletion_protection.enabled`].{Key:Key,Value:Value}' 2>/dev/null\naws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text | head -3 | xargs -I {} aws elbv2 describe-load-balancer-attributes --load-balancer-arn {} --query 'Attributes[?Key==`deletion_protection.enabled`].Value' --output text 2>/dev/null",
  "Check if Elastic Load Balancers have insecure SSL ciphers.": "# Check ELB SSL policies and ciphers\naws elbv2 describe-listeners --query 'Listeners[?Protocol==`HTTPS` || Protocol==`TLS`].{ListenerArn:ListenerArn,Protocol:Protocol,SslPolicy:SslPolicy}' --output table\naws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text | head -3 | xargs -I {} aws elbv2 describe-listeners --load-balancer-arn {} --query 'Listeners[?Protocol==`HTTPS`].SslPolicy' --output text 2>/dev/null",
  "Check if Elastic Load Balancers have logging enabled.": "# Check ELB access logging configuration\naws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text | head -5 | xargs -I {} aws elbv2 describe-load-balancer-attributes --load-balancer-arn {} --query 'Attributes[?Key==`access_logs.s3.enabled`].{Key:Key,Value:Value}' 2>/dev/null\naws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text | head -3 | xargs -I {} aws elbv2 describe-load-balancer-attributes --load-balancer-arn {} --query 'Attributes[?Key==`access_logs.s3.enabled` && Value==`false`]' 2>/dev/null",
  "Check if GuardDuty is enabled": "# Check GuardDuty status in current region\naws guardduty list-detectors --query 'DetectorIds[0]' --output text | xargs -I {} aws guardduty get-detector --detector-id {} --query '{DetectorId:\"{}\",Status:Status,ServiceRole:ServiceRole}'\naws guardduty list-detectors | jq '.DetectorIds[]' | head -1 | xargs -I {} aws guardduty get-detector --detector-id {}",
  "Check if IAM users have Hardware MFA enabled.": "# Check IAM users for hardware MFA devices\naws iam get-credential-report --query 'Content' --output text | base64 -d | awk -F, '$8==\"true\" && $9==\"false\" {print $1}' | head -10\naws iam list-virtual-mfa-devices --assignment-status Assigned --query 'VirtualMFADevices[].User.UserName' --output text",
  "Check if Inspector2 is enabled for Amazon EC2 instances, ECR container images and Lambda functions.": "# Check Inspector2 enablement status\naws inspector2 batch-get-account-status --account-ids $(aws sts get-caller-identity --query Account --output text) --query 'accounts[].{accountId:accountId,resourceState:resourceState,ecr:ecr,ec2:ec2,lambda:lambda}'\naws inspector2 describe-organization-configuration --query '{autoEnable:autoEnable,ec2:ec2,ecr:ecr,lambda:lambda}' 2>/dev/null",
  "Check if RDS Security Group events are subscribed.": "# Check RDS event subscriptions for security groups\naws rds describe-event-subscriptions --query 'EventSubscriptionsList[?contains(EventCategoriesList, `security-group`) || contains(SourceType, `db-security-group`)].{SubscriptionName:CustSubscriptionId,SourceType:SourceType,EventCategories:EventCategoriesList}' --output table\naws rds describe-event-subscriptions --query 'EventSubscriptionsList[].{Name:CustSubscriptionId,SourceType:SourceType}'",
  "Check if RDS instances are protected by a backup plan.": "# Check RDS instances in backup plans\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,DBInstanceArn:DBInstanceArn}' | jq -r '.[] | .DBInstanceArn' | head -5 | xargs -I {} aws backup list-protected-resources --query 'Results[?ResourceArn==`{}`]' 2>/dev/null\naws backup list-backup-plans --query 'BackupPlansList[].BackupPlanId' --output text | head -3 | xargs -I {} aws backup get-backup-plan --backup-plan-id {} --query 'BackupPlan.Rules[].Targets[]' | jq '.[] | select(contains(\"rds\"))' 2>/dev/null",
  "Check if RDS instances have IAM authentication enabled.": "# Check RDS instances for IAM database authentication\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,IAMDatabaseAuthenticationEnabled:IAMDatabaseAuthenticationEnabled}' | jq '.[] | select(.IAMDatabaseAuthenticationEnabled == false)'\naws rds describe-db-instances --query 'DBInstances[?IAMDatabaseAuthenticationEnabled==`false`].DBInstanceIdentifier' --output text",
  "Check if RDS instances have deletion protection enabled.": "# Check RDS instances for deletion protection\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,DeletionProtection:DeletionProtection}' | jq '.[] | select(.DeletionProtection == false)'\naws rds describe-db-instances --query 'DBInstances[?DeletionProtection==`false`].DBInstanceIdentifier' --output text",
  "Check if RDS instances have multi-AZ enabled.": "# Check RDS instances for Multi-AZ deployment\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,MultiAZ:MultiAZ,Engine:Engine}' | jq '.[] | select(.MultiAZ == false)'\naws rds describe-db-instances --query 'DBInstances[?MultiAZ==`false`].{DBInstanceIdentifier:DBInstanceIdentifier,Engine:Engine}' --output table",
  "Check if Route53 public hosted zones are logging queries to CloudWatch Logs.": "# Check Route53 query logging configuration\naws route53 list-hosted-zones --query 'HostedZones[?Config.PrivateZone==`false`].{Id:Id,Name:Name}' | jq -r '.[] | .Id' | head -5 | xargs -I {} aws route53 get-query-logging-config --id {} 2>/dev/null || echo \"No query logging configured\"\naws route53 list-query-logging-configs --query 'QueryLoggingConfigs[].{HostedZoneId:HostedZoneId,CloudWatchLogsLogGroupArn:CloudWatchLogsLogGroupArn}' --output table",
  "Check if S3 bucket MFA Delete is not enabled.": "# Check S3 bucket MFA Delete status\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} aws s3api get-bucket-versioning --bucket {} --query '{Bucket:\"{}\" ,Status:Status,MfaDelete:MfaDelete}'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-versioning --bucket {}",
  "Check if S3 buckets have ACLs enabled": "# Check S3 bucket ACL configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} aws s3api get-bucket-acl --bucket {} --query 'Grants[?Grantee.Type==`Group`]'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-public-access-block --bucket {} 2>/dev/null",
  "Check if S3 buckets have KMS encryption enabled.": "# Check S3 bucket encryption configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-encryption --bucket {} --query ServerSideEncryptionConfiguration.Rules[0].ApplyServerSideEncryptionByDefault 2>/dev/null || echo \"No encryption\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api head-object --bucket {} --key $(aws s3api list-objects-v2 --bucket {} --max-items 1 --query 'Contents[0].Key' --output text 2>/dev/null) --query ServerSideEncryption 2>/dev/null",
  "Check if S3 buckets have event notifications enabled.": "# Check S3 bucket event notification configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-notification-configuration --bucket {} 2>/dev/null || echo \"No notifications\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-notification-configuration --bucket {} --query '{CloudWatchConfigurations:CloudWatchConfigurations,LambdaConfigurations:LambdaConfigurations}' 2>/dev/null",
  "Check if S3 buckets have object versioning enabled": "# Check S3 bucket versioning status\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} aws s3api get-bucket-versioning --bucket {} --query '{Bucket:\"{}\" ,Status:Status}'\naws s3api list-buckets --query 'Buckets[:3]' | jq -r '.[].Name' | xargs -I {} aws s3api get-bucket-versioning --bucket {} 2>/dev/null",
  "Check if S3 buckets have secure transport policy.": "# Check S3 bucket policies for secure transport\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-policy --bucket {} --query Policy --output text 2>/dev/null | jq -r . | grep -i ssl 2>/dev/null || echo \"No secure transport policy\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-policy --bucket {} --query Policy --output text 2>/dev/null | jq -r 'select(.Statement[].Condition.Bool.\"aws:SecureTransport\"?)'",
  "Check if S3 buckets have server access logging enabled": "# Check S3 bucket access logging configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-logging --bucket {} --query LoggingEnabled 2>/dev/null || echo \"No logging\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-logging --bucket {} 2>/dev/null",
  "Check if Secrets Manager secret rotation is enabled.": "# Check Secrets Manager rotation configuration\naws secretsmanager list-secrets --query 'SecretList[].{Name:Name,RotationEnabled:RotationEnabled,RotationRules:RotationRules}' | jq '.[] | select(.RotationEnabled != true)'\naws secretsmanager list-secrets --query 'SecretList[?RotationEnabled!=`true`].{Name:Name,RotationEnabled:RotationEnabled}' --output table",
  "Check if Security Hub is enabled and its standard subscriptions.": "# Check Security Hub enablement and standards\naws securityhub get-enabled-standards --query 'StandardsSubscriptions[].{StandardsArn:StandardsArn,StandardsStatus:StandardsStatus}' --output table\naws securityhub describe-hub --query '{HubArn:HubArn,SubscribedAt:SubscribedAt,AutoEnableControls:AutoEnableControls}' 2>/dev/null || echo \"Security Hub not enabled\"",
  "DataFirehose delivery streams should be encrypted at rest.": "# Check Kinesis Data Firehose encryption\naws firehose list-delivery-streams --query 'DeliveryStreamNames[]' --output text | head -5 | xargs -I {} aws firehose describe-delivery-stream --delivery-stream-name {} --query 'DeliveryStreamDescription.{DeliveryStreamName:DeliveryStreamName,EncryptionConfiguration:DeliveryStreamEncryptionConfiguration}' 2>/dev/null\naws firehose list-delivery-streams --query 'DeliveryStreamNames[]' --output text | head -3 | xargs -I {} aws firehose describe-delivery-stream --delivery-stream-name {} --query 'DeliveryStreamDescription.DeliveryStreamEncryptionConfiguration.Status' --output text 2>/dev/null",
  "EC2 Auto Scaling Group should use multiple instance types in multiple Availability Zones.": "# Check Auto Scaling Groups for diversity\naws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[].{AutoScalingGroupName:AutoScalingGroupName,AvailabilityZones:AvailabilityZones,MixedInstancesPolicy:MixedInstancesPolicy}' | jq '.[] | {Name:.AutoScalingGroupName,AZCount:(.AvailabilityZones|length),HasMixedInstances:(.MixedInstancesPolicy!=null)}'\naws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[?MixedInstancesPolicy==null].{AutoScalingGroupName:AutoScalingGroupName,AZs:AvailabilityZones}' --output table",
  "ECR repositories should have tag immutability configured": "# Check ECR repository tag immutability\naws ecr describe-repositories --query 'repositories[].{repositoryName:repositoryName,imageTagMutability:imageTagMutability}' | jq '.[] | select(.imageTagMutability != \"IMMUTABLE\")'\naws ecr describe-repositories --query 'repositories[?imageTagMutability!=`IMMUTABLE`].repositoryName' --output text | head -5",
  "ECS clusters should use Container Insights": "# Check ECS clusters for Container Insights\naws ecs list-clusters --query 'clusterArns[]' --output text | head -5 | xargs -I {} aws ecs describe-clusters --clusters {} --include INSIGHTS --query 'clusters[].{clusterName:clusterName,insights:settings}' 2>/dev/null\naws ecs list-clusters --query 'clusterArns[]' --output text | head -3 | xargs -I {} aws ecs describe-clusters --clusters {} --query 'clusters[].{Name:clusterName,Insights:settings[?name==`containerInsights`].value}' 2>/dev/null",
  "Enable termination protection for Cloudformation Stacks": "# Check CloudFormation stack termination protection\naws cloudformation describe-stacks --query 'Stacks[].{StackName:StackName,EnableTerminationProtection:EnableTerminationProtection}' | jq '.[] | select(.EnableTerminationProtection != true)'\naws cloudformation describe-stacks --query 'Stacks[?EnableTerminationProtection!=`true`].{StackName:StackName,Status:StackStatus}' --output table",
  "Ensure AWS Config is enabled in all regions.": "# Check AWS Config status across regions\naws configservice describe-configuration-recorders --query 'ConfigurationRecorders[].{name:name,roleARN:roleARN}' --output table\nfor region in $(aws ec2 describe-regions --query 'Regions[].RegionName' --output text | head -5); do echo \"Region: $region\"; aws configservice describe-configuration-recorders --region $region --query 'ConfigurationRecorders[].name' --output text 2>/dev/null || echo \"No Config recorder\"; done",
  "Ensure CodeBuild Project has been invoked in the last 90 days": "# Check CodeBuild project build history and last execution\naws codebuild list-projects --query 'projects[]' --output text | head -5 | xargs -I {} sh -c 'echo \"Project: {}\" && aws codebuild list-builds-for-project --project-name {} --sort-order DESCENDING --query builds[0] --output text 2>/dev/null || echo \"No builds found\"'\naws codebuild list-builds --sort-order DESCENDING --query 'ids[0]' --output text | xargs -I {} aws codebuild batch-get-builds --ids {} --query 'builds[0].{projectName:projectName,startTime:startTime,endTime:endTime,buildStatus:buildStatus}'",
  "Ensure CodeBuild Project uses a controlled buildspec": "# Check CodeBuild project buildspec source configuration\naws codebuild list-projects --query 'projects[]' --output text | head -5 | xargs -I {} aws codebuild batch-get-projects --names {} --query 'projects[].{name:name,source:source}' | jq '.[] | {name: .name, buildspec: .source.buildspec, location: .source.location, type: .source.type}'\naws codebuild list-projects --query 'projects[]' --output text | head -3 | xargs -I {} aws codebuild batch-get-projects --names {} --query 'projects[].source.{buildspec:buildspec,type:type,location:location}'",
  "Ensure DRS is enabled with jobs.": "# Check AWS Application Migration Service (DRS) status\naws drs describe-jobs --query 'items[].{jobID:jobID,status:status,creationDateTime:creationDateTime,type:type}' --output table 2>/dev/null || echo \"DRS may not be enabled or no permissions\"\naws drs describe-source-servers --query 'items[].{sourceServerID:sourceServerID,arn:arn,isArchived:isArchived,replicationInfo:replicationInfo}' --output table 2>/dev/null",
  "Ensure IAM inline policies that allow full \"cloudtrail:*\" privileges are not created": "# Check inline policies for full CloudTrail privileges\naws iam list-users --query 'Users[].UserName' --output text | head -5 | xargs -I {} sh -c 'echo \"User: {}\" && aws iam list-user-policies --user-name {} --query PolicyNames --output text | xargs -I pol aws iam get-user-policy --user-name {} --policy-name pol --query PolicyDocument --output text 2>/dev/null | jq -r . 2>/dev/null | grep -i cloudtrail.*\\*'\naws iam list-roles --query 'Roles[].RoleName' --output text | head -5 | xargs -I {} sh -c 'echo \"Role: {}\" && aws iam list-role-policies --role-name {} --query PolicyNames --output text | xargs -I pol aws iam get-role-policy --role-name {} --policy-name pol --query PolicyDocument --output text 2>/dev/null | jq -r . 2>/dev/null | grep -i cloudtrail.*\\*'",
  "Ensure IAM inline policies that allow full \"kms:*\" privileges are not created": "# Check inline policies for full KMS privileges\naws iam list-users --query 'Users[].UserName' --output text | head -5 | xargs -I {} sh -c 'echo \"User: {}\" && aws iam list-user-policies --user-name {} --query PolicyNames --output text | xargs -I pol aws iam get-user-policy --user-name {} --policy-name pol --query PolicyDocument --output text 2>/dev/null | jq -r . 2>/dev/null | grep -i kms.*\\*'\naws iam list-roles --query 'Roles[].RoleName' --output text | head -5 | xargs -I {} sh -c 'echo \"Role: {}\" && aws iam list-role-policies --role-name {} --query PolicyNames --output text | xargs -I pol aws iam get-role-policy --role-name {} --policy-name pol --query PolicyDocument --output text 2>/dev/null | jq -r . 2>/dev/null | grep -i kms.*\\*'",
  "Ensure IAM instance roles are used for AWS resource access from instances": "# Check EC2 instances without IAM instance profiles\naws ec2 describe-instances --query 'Reservations[].Instances[?IamInstanceProfile==null].{InstanceId:InstanceId,State:State.Name,LaunchTime:LaunchTime}' --output table\naws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[?IamInstanceProfile==null].InstanceId' --output text",
  "Ensure VPC Flow Logging is Enabled in all VPCs.": "# Check VPC Flow Logs configuration\naws ec2 describe-vpcs --query 'Vpcs[].VpcId' --output text | head -5 | xargs -I {} sh -c 'echo \"VPC: {}\" && aws ec2 describe-flow-logs --filter Name=resource-id,Values={} --query FlowLogs[].{FlowLogStatus:FlowLogStatus,ResourceId:ResourceId} || echo \"No flow logs\"'\naws ec2 describe-flow-logs --query 'FlowLogs[].{ResourceId:ResourceId,FlowLogStatus:FlowLogStatus,LogDestination:LogDestination}'",
  "Ensure VPC subnets do not assign public IP by default": "# Check subnet public IP assignment\naws ec2 describe-subnets --query 'Subnets[?MapPublicIpOnLaunch==`true`].{SubnetId:SubnetId,VpcId:VpcId,AvailabilityZone:AvailabilityZone,MapPublicIpOnLaunch:MapPublicIpOnLaunch}' --output table\naws ec2 describe-subnets --query 'Subnets[].{SubnetId:SubnetId,MapPublicIpOnLaunch:MapPublicIpOnLaunch}' | jq '.[] | select(.MapPublicIpOnLaunch == true)'",
  "Ensure a log metric filter and alarm exist for AWS Config configuration changes.": "# Check CloudWatch metric filters for Config changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `configurationItem.configurationItemStatus`) || contains(filterPattern, `configService`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --alarm-name-prefix Config --query 'MetricAlarms[].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for AWS Management Console authentication failures.": "# Check metric filters for console authentication failures\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `ConsoleLogin`) && contains(filterPattern, `Failed`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `ConsoleLogin`) || contains(MetricName, `AuthFail`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for AWS Organizations changes.": "# Check metric filters for Organizations changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `organizations`) || contains(filterPattern, `CreateAccount`) || contains(filterPattern, `InviteAccountToOrganization`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `Organizations`) || contains(MetricName, `OrgChanges`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for CloudTrail configuration changes.": "# Check metric filters for CloudTrail changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `cloudtrail`) || contains(filterPattern, `StopLogging`) || contains(filterPattern, `DeleteTrail`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `CloudTrail`) || contains(MetricName, `TrailChanges`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for IAM policy changes.": "# Check metric filters for IAM policy changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `DeleteGroupPolicy`) || contains(filterPattern, `DeleteRolePolicy`) || contains(filterPattern, `DeleteUserPolicy`) || contains(filterPattern, `PutGroupPolicy`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `IAMPolicyChanges`) || contains(MetricName, `PolicyChanges`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for Management Console sign-in without MFA.": "# Check metric filters for console sign-in without MFA\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `ConsoleLogin`) && contains(filterPattern, `mfaAuthenticated`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `NoMFA`) || contains(MetricName, `ConsoleLoginNoMFA`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for S3 bucket policy changes.": "# Check metric filters for S3 bucket policy changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `PutBucketPolicy`) || contains(filterPattern, `DeleteBucketPolicy`) || contains(filterPattern, `PutBucketAcl`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `S3BucketPolicy`) || contains(MetricName, `S3PolicyChanges`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for VPC changes.": "# Check metric filters for VPC changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `CreateVpc`) || contains(filterPattern, `DeleteVpc`) || contains(filterPattern, `ModifyVpc`) || contains(filterPattern, `AttachInternetGateway`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `VPCChanges`) || contains(MetricName, `VpcModifications`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL).": "# Check metric filters for NACL changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `CreateNetworkAcl`) || contains(filterPattern, `DeleteNetworkAcl`) || contains(filterPattern, `ReplaceNetworkAcl`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `NACL`) || contains(MetricName, `NetworkAcl`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for changes to network gateways.": "# Check metric filters for network gateway changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `CreateCustomerGateway`) || contains(filterPattern, `DeleteCustomerGateway`) || contains(filterPattern, `AttachInternetGateway`) || contains(filterPattern, `CreateVpnGateway`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `Gateway`) || contains(MetricName, `NetworkGateway`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created KMS CMKs.": "# Check metric filters for KMS key deletion\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `DisableKey`) || contains(filterPattern, `ScheduleKeyDeletion`) || contains(filterPattern, `kms`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `KMS`) || contains(MetricName, `CMKDeletion`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for security group changes.": "# Check metric filters for security group changes\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `AuthorizeSecurityGroupIngress`) || contains(filterPattern, `AuthorizeSecurityGroupEgress`) || contains(filterPattern, `RevokeSecurityGroupIngress`) || contains(filterPattern, `CreateSecurityGroup`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `SecurityGroup`) || contains(MetricName, `SGChanges`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for unauthorized API calls.": "# Check metric filters for unauthorized API calls\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `errorCode`) && (contains(filterPattern, `AccessDenied`) || contains(filterPattern, `UnauthorizedOperation`))]|.{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `UnauthorizedAPI`) || contains(MetricName, `APIErrors`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure a log metric filter and alarm exist for usage of root account.": "# Check metric filters for root account usage\naws logs describe-metric-filters --query 'metricFilters[?contains(filterPattern, `root`) && contains(filterPattern, `userIdentity.type`)].{filterName:filterName,filterPattern:filterPattern}' --output table\naws cloudwatch describe-alarms --query 'MetricAlarms[?contains(MetricName, `Root`) || contains(MetricName, `RootUsage`)].{AlarmName:AlarmName,MetricName:MetricName}' --output table",
  "Ensure access keys are rotated every 90 days or less": "# Check IAM access key age (older than 90 days)\naws iam get-credential-report --query 'Content' --output text | base64 -d | awk -F, 'NR>1 && $11!=\"N/A\" {print $1 \",\" $11 \",\" $13}' | awk -F, '$2!=\"N/A\" {cmd=\"date -d \\\"\" $2 \"\\\" +%s\"; cmd | getline epoch1; close(cmd); cmd=\"date +%s\"; cmd | getline epoch2; close(cmd); if((epoch2-epoch1)/86400 > 90) print $1 \",\" $2 \",\" (epoch2-epoch1)/86400 \" days\"}' | head -10\naws iam list-access-keys --user-name $(aws iam list-users --query 'Users[0].UserName' --output text) --query 'AccessKeyMetadata[].{UserName:UserName,AccessKeyId:AccessKeyId,CreateDate:CreateDate}' 2>/dev/null",
  "Ensure all VPCs have Network Firewall enabled": "# Check VPCs for Network Firewall configuration\naws ec2 describe-vpcs --query 'Vpcs[].VpcId' --output text | head -5 | xargs -I {} sh -c 'echo \"VPC: {}\" && aws network-firewall list-firewalls --query \"Firewalls[?VpcId==`{}`].{FirewallName:FirewallName,FirewallArn:FirewallArn}\" 2>/dev/null || echo \"No Network Firewall found\"'\naws network-firewall list-firewalls --query 'Firewalls[].{FirewallName:FirewallName,VpcId:VpcId,SubnetMappings:SubnetMappings}' --output table 2>/dev/null",
  "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to Microsoft RDP port 3389": "# Check Network ACLs for open RDP access\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0` && (PortRange.From<=`3389` && PortRange.To>=`3389`)].{NetworkAclId:NetworkAclId,RuleNumber:RuleNumber,CidrBlock:CidrBlock,PortRange:PortRange}' --output table\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0`]' | jq '.[] | select(.PortRange.From <= 3389 and .PortRange.To >= 3389)'",
  "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to SSH port 22": "# Check Network ACLs for open SSH access\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0` && (PortRange.From<=`22` && PortRange.To>=`22`)].{NetworkAclId:NetworkAclId,RuleNumber:RuleNumber,CidrBlock:CidrBlock,PortRange:PortRange}' --output table\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0`]' | jq '.[] | select(.PortRange.From <= 22 and .PortRange.To >= 22)'",
  "Ensure no Network ACLs allow ingress from 0.0.0.0/0 to any port.": "# Check Network ACLs for unrestricted access\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0`].{NetworkAclId:NetworkAclId,RuleNumber:RuleNumber,CidrBlock:CidrBlock,PortRange:PortRange}' --output table\naws ec2 describe-network-acls --query 'NetworkAcls[].Entries[?RuleAction==`allow` && CidrBlock==`0.0.0.0/0` && PortRange.From==`0` && PortRange.To==`65535`]'",
  "Ensure route table changes are monitored": "# Manual: Check CloudTrail and CloudWatch for route table monitoring\n# Verify CloudTrail logs for route table events\naws logs filter-log-events --log-group-name CloudTrail/RouteTableChanges --filter-pattern '{ $.eventName = CreateRoute || $.eventName = DeleteRoute || $.eventName = ReplaceRoute }' --start-time $(date -d '7 days ago' +%s)000 --query 'events[].{time:eventTime,event:eventName,user:userIdentity.type}' 2>/dev/null\naws cloudwatch describe-alarms --alarm-names RouteTableChanges --query 'MetricAlarms[].{AlarmName:AlarmName,MetricName:MetricName,ComparisonOperator:ComparisonOperator}' --output table 2>/dev/null",
  "Ensure routing tables for VPC peering are least access.": "# Check VPC peering route table configurations\naws ec2 describe-vpc-peering-connections --query 'VpcPeeringConnections[?Status.Code==`active`].{VpcPeeringConnectionId:VpcPeeringConnectionId,RequesterVpcInfo:RequesterVpcInfo,AccepterVpcInfo:AccepterVpcInfo}' | jq -r '.[] | .VpcPeeringConnectionId' | head -3 | xargs -I {} sh -c 'echo \"Peering: {}\" && aws ec2 describe-route-tables --filters Name=route.vpc-peering-connection-id,Values={} --query \"RouteTables[].Routes[?VpcPeeringConnectionId==`{}`].{Destination:DestinationCidrBlock,Target:VpcPeeringConnectionId}\"'\naws ec2 describe-route-tables --query 'RouteTables[?Routes[?VpcPeeringConnectionId]].{RouteTableId:RouteTableId,VpcId:VpcId,Routes:Routes[?VpcPeeringConnectionId]}' --output table",
  "Ensure secrets manager secrets are not unused": "# Check Secrets Manager secrets usage and last accessed time\naws secretsmanager list-secrets --query 'SecretList[].{Name:Name,LastAccessedDate:LastAccessedDate,LastChangedDate:LastChangedDate}' | jq '.[] | select(.LastAccessedDate == null or (.LastAccessedDate | fromdateiso8601) < (now - 7776000))' 2>/dev/null\naws secretsmanager list-secrets --query 'SecretList[:5].{Name:Name,CreatedDate:CreatedDate,LastChangedDate:LastChangedDate}' --output table",
  "Ensure that CodeBuild projects have S3 or CloudWatch logging enabled": "# Check CodeBuild project logging configuration\naws codebuild list-projects --query 'projects[]' --output text | head -5 | xargs -I {} aws codebuild batch-get-projects --names {} --query 'projects[].{name:name,logsConfig:logsConfig}' | jq '.[] | {name: .name, cloudWatchLogs: .logsConfig.cloudWatchLogs.status, s3Logs: .logsConfig.s3Logs.status}'\naws codebuild list-projects --query 'projects[]' --output text | head -3 | xargs -I {} aws codebuild batch-get-projects --names {} --query 'projects[].logsConfig'",
  "Ensure that model invocation logging is enabled for Amazon Bedrock.": "# Check Bedrock model invocation logging configuration\naws bedrock get-model-invocation-logging-configuration --query '{LoggingConfig:loggingConfig.textDataDeliveryEnabled,CloudWatchConfig:loggingConfig.cloudWatchConfig,S3Config:loggingConfig.s3Config}' 2>/dev/null || echo \"Bedrock may not be available in this region\"\naws logs describe-log-groups --log-group-name-prefix /aws/bedrock/modelinvocations --query 'logGroups[].{logGroupName:logGroupName,creationTime:creationTime}' --output table 2>/dev/null",
  "Ensure there are VPCs in more than one region": "# Manual: Check VPCs across multiple AWS regions\nfor region in us-east-1 us-west-2 eu-west-1 ap-southeast-1; do echo \"Region: $region\"; aws ec2 describe-vpcs --region $region --query 'Vpcs[].{VpcId:VpcId,CidrBlock:CidrBlock,IsDefault:IsDefault}' --output table 2>/dev/null | head -5 || echo \"No access or VPCs in $region\"; done\necho \"Summary:\"; for region in us-east-1 us-west-2 eu-west-1; do echo -n \"$region: \"; aws ec2 describe-vpcs --region $region --query 'length(Vpcs[?IsDefault==`false`])' --output text 2>/dev/null || echo \"0\"; done",
  "Ensure unused User Access Keys are disabled": "# Check for unused access keys (no activity in 90+ days)\naws iam get-credential-report --query 'Content' --output text | base64 -d | awk -F, 'NR>1 && $11!=\"N/A\" && $13!=\"N/A\" {print $1 \",\" $11 \",\" $13}' | awk -F, '{cmd=\"date -d \\\"\" $3 \"\\\" +%s 2>/dev/null || date -d \\\"\" $2 \"\\\" +%s\"; cmd | getline epoch1; close(cmd); cmd=\"date +%s\"; cmd | getline epoch2; close(cmd); if((epoch2-epoch1)/86400 > 90) print $1 \",\" $2 \",\" $3 \",\" (epoch2-epoch1)/86400 \" days\"}' | head -10",
  "Ensure unused user console access are disabled": "# Check for unused console access (no activity in 90+ days)\naws iam get-credential-report --query 'Content' --output text | base64 -d | awk -F, 'NR>1 && $4==\"true\" && $5!=\"N/A\" {print $1 \",\" $5}' | awk -F, '{cmd=\"date -d \\\"\" $2 \"\\\" +%s\"; cmd | getline epoch1; close(cmd); cmd=\"date +%s\"; cmd | getline epoch2; close(cmd); if((epoch2-epoch1)/86400 > 90) print $1 \",\" $2 \",\" (epoch2-epoch1)/86400 \" days\"}' | head -10",
  "Ensure users make use of temporary credentials assuming IAM roles": "# Manual: Review IAM users vs role usage patterns\n# Check for users with long-term access keys vs role assumptions\naws iam get-credential-report --query 'Content' --output text | base64 -d | awk -F, 'NR>1 && $11!=\"N/A\" {print $1,\"has access keys\"}' | head -10\naws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=AssumeRole --start-time $(date -d '7 days ago' --iso-8601) --query 'Events[].{Time:EventTime,User:Username,Event:EventName}' | head -5 2>/dev/null\necho \"Manual review required: Check if users are using temporary credentials via role assumption rather than long-term access keys\"",
  "Find obsolete Lambda runtimes.": "# Check Lambda functions for deprecated/obsolete runtimes\naws lambda list-functions --query 'Functions[].{FunctionName:FunctionName,Runtime:Runtime}' | jq '.[] | select(.Runtime | test(\"python2|python3.6|python3.7|nodejs10|nodejs12|dotnetcore2|java8\"))'\naws lambda list-functions --query 'Functions[?Runtime==`python2.7` || Runtime==`python3.6` || Runtime==`nodejs10.x`].{FunctionName:FunctionName,Runtime:Runtime}' --output table",
  "Find trust boundaries in VPC endpoint connections.": "# Check VPC endpoints and their trust boundaries\naws ec2 describe-vpc-endpoints --query 'VpcEndpoints[].{VpcEndpointId:VpcEndpointId,ServiceName:ServiceName,VpcId:VpcId,PolicyDocument:PolicyDocument,RouteTableIds:RouteTableIds}' | jq '.[] | select(.PolicyDocument != null) | {VpcEndpointId: .VpcEndpointId, ServiceName: .ServiceName, PolicyDocument: (.PolicyDocument | fromjson)}'\naws ec2 describe-vpc-endpoints --query 'VpcEndpoints[].{VpcEndpointId:VpcEndpointId,ServiceName:ServiceName,State:State,VpcId:VpcId}' --output table",
  "GuardDuty EKS Runtime Monitoring should be enabled": "# Check GuardDuty EKS Runtime Monitoring configuration\naws guardduty list-detectors --query 'DetectorIds[0]' --output text | xargs -I {} aws guardduty describe-malware-protection --detector-id {} --query 'ScanEc2InstanceWithFindings.EbsVolumes.Status' 2>/dev/null\naws guardduty list-detectors --query 'DetectorIds[0]' --output text | xargs -I {} aws guardduty get-detector --detector-id {} --query '{DetectorId:\"{}\",Features:Features}' | jq '.Features[] | select(.Name == \"EKS_RUNTIME_MONITORING\")' 2>/dev/null",
  "Maintain different contact details to security, billing and operations.": "# Manual: Check AWS account contact information in AWS Console\n# Navigate to: Account Settings > Contact Information\n# Verify different contacts are configured for:\n# 1. Billing - Account Settings > Payment methods and billing contacts\n# 2. Security - Account Settings > Security contact information  \n# 3. Operations - Account Settings > Alternate contacts\necho \"Manual check required: Login to AWS Console > Account Settings to verify different contact details for security, billing, and operations are configured\"\naws account get-contact-information --query 'ContactInformation.{FullName:FullName,Company:CompanyName,PhoneNumber:PhoneNumber}' 2>/dev/null || echo \"Use AWS Console to check contact details\"",
  "Secrets should be rotated periodically": "# Check Secrets Manager rotation configuration and schedule\naws secretsmanager list-secrets --query 'SecretList[].{Name:Name,RotationEnabled:RotationEnabled,RotationRules:RotationRules,LastChangedDate:LastChangedDate}' | jq '.[] | select(.RotationEnabled != true or .RotationRules == null)'\naws secretsmanager list-secrets --query 'SecretList[?RotationEnabled!=`true`].{Name:Name,LastChangedDate:LastChangedDate,Description:Description}' --output table",
  "Step Functions state machines should have logging enabled": "# Check Step Functions state machine logging configuration\naws stepfunctions list-state-machines --query 'stateMachines[].stateMachineArn' --output text | head -5 | xargs -I {} aws stepfunctions describe-state-machine --state-machine-arn {} --query '{stateMachineArn:\"{}\",loggingConfiguration:loggingConfiguration}' 2>/dev/null\naws stepfunctions list-state-machines --query 'stateMachines[].{name:name,stateMachineArn:stateMachineArn}' --output table | head -5",
  "Amazon EBS volumes should be protected by a backup plan.": "# Check EBS volumes in backup plans\naws ec2 describe-volumes --query 'Volumes[].VolumeId' --output text | head -5 | xargs -I {} aws backup list-protected-resources --query 'Results[?ResourceArn==`arn:aws:ec2:*:*:volume/{}`]' 2>/dev/null\naws backup list-backup-plans --query 'BackupPlansList[].BackupPlanId' --output text | head -3 | xargs -I {} aws backup get-backup-plan --backup-plan-id {} --query 'BackupPlan.Rules[].Targets[]' | jq '.[] | select(contains(\"ec2\"))' 2>/dev/null",
  "Check if AWS X-Ray tracing is enabled for API Gateway REST API stages.": "# Check API Gateway X-Ray tracing configuration\naws apigateway get-rest-apis --query 'items[].id' --output text | head -3 | xargs -I {} aws apigateway get-stages --rest-api-id {} --query 'item[].{stageName:stageName,tracingEnabled:tracingEnabled}' 2>/dev/null\naws apigateway get-rest-apis --query 'items[].{id:id,name:name}' | jq -r '.[] | .id' | head -3 | xargs -I {} aws apigateway get-stages --rest-api-id {} --query 'item[?tracingEnabled!=`true`].{stageName:stageName,tracingEnabled:tracingEnabled}'",
  "Check if Amazon Macie is enabled.": "# Check Amazon Macie enablement status\naws macie2 get-macie-session --query '{status:status,serviceRole:serviceRole,createdAt:createdAt}' 2>/dev/null || echo \"Macie is not enabled or not available in this region\"\naws macie2 describe-organization-configuration --query '{autoEnable:autoEnable,maxAccountLimitReached:maxAccountLimitReached}' 2>/dev/null",
  "Check if CloudFront distributions have Field Level Encryption enabled.": "# Check CloudFront field-level encryption configuration\naws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output text | head -5 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId' 2>/dev/null\naws cloudfront list-field-level-encryption-configs --query 'FieldLevelEncryptionList.Items[].{Id:Id,Comment:Comment}' --output table 2>/dev/null || echo \"No field-level encryption configs found\"",
  "Check if EC2 instances have detailed monitoring enabled.": "# Check EC2 instance detailed monitoring status\naws ec2 describe-instances --query 'Reservations[].Instances[].{InstanceId:InstanceId,Monitoring:Monitoring.State,State:State.Name}' | jq '.[] | select(.Monitoring != \"enabled\")'\naws ec2 describe-instances --filters Name=instance-state-name,Values=running --query 'Reservations[].Instances[?Monitoring.State!=`enabled`].{InstanceId:InstanceId,Monitoring:Monitoring.State}' --output table",
  "Check if Geo restrictions are enabled in CloudFront distributions.": "# Check CloudFront geographic restrictions\naws cloudfront list-distributions --query 'DistributionList.Items[].Id' --output text | head -5 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.Restrictions.GeoRestriction.{RestrictionType:RestrictionType,Quantity:Quantity,Items:Items}' 2>/dev/null\naws cloudfront list-distributions --query 'DistributionList.Items[].{Id:Id,DomainName:DomainName}' | jq -r '.[] | .Id' | head -3 | xargs -I {} aws cloudfront get-distribution --id {} --query 'Distribution.DistributionConfig.Restrictions.GeoRestriction' 2>/dev/null",
  "Check if IAM Access Analyzer is enabled": "# Check IAM Access Analyzer status\naws accessanalyzer list-analyzers --query 'analyzers[].{name:name,arn:arn,status:status,type:type}' --output table\naws accessanalyzer list-analyzers --query 'analyzers[?status!=`ACTIVE`].{name:name,status:status}' --output table 2>/dev/null || echo \"No Access Analyzers found or service not available\"",
  "Check if Lambda functions invoke API operations are being recorded by CloudTrail.": "# Check CloudTrail logging for Lambda API operations\naws cloudtrail describe-trails --query 'trailList[].{Name:Name,S3BucketName:S3BucketName,IncludeGlobalServiceEvents:IncludeGlobalServiceEvents,IsLogging:IsLogging}' --output table\naws logs filter-log-events --log-group-name CloudTrail/Lambda --filter-pattern '{ $.eventSource = lambda.* && $.eventName = Invoke* }' --start-time $(date -d '7 days ago' +%s)000 --query 'events[].{time:eventTime,event:eventName,source:eventSource}' | head -5 2>/dev/null",
  "Check if RDS DB instances have copy tags to snapshots enabled": "# Check RDS instances copy tags to snapshots setting\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,CopyTagsToSnapshot:CopyTagsToSnapshot}' | jq '.[] | select(.CopyTagsToSnapshot != true)'\naws rds describe-db-instances --query 'DBInstances[?CopyTagsToSnapshot!=`true`].{DBInstanceIdentifier:DBInstanceIdentifier,Engine:Engine}' --output table",
  "Check if RDS Instances events are subscribed.": "# Check RDS instance event subscriptions\naws rds describe-event-subscriptions --query 'EventSubscriptionsList[?SourceType==`db-instance`].{SubscriptionName:CustSubscriptionId,SourceType:SourceType,EventCategories:EventCategoriesList,Enabled:Enabled}' --output table\naws rds describe-db-instances --query 'DBInstances[].DBInstanceIdentifier' --output text | head -5 | xargs -I {} echo \"Instance: {} - Check event subscriptions manually\"",
  "Check if RDS Parameter Group events are subscribed.": "# Check RDS parameter group event subscriptions\naws rds describe-event-subscriptions --query 'EventSubscriptionsList[?SourceType==`db-parameter-group`].{SubscriptionName:CustSubscriptionId,SourceType:SourceType,EventCategories:EventCategoriesList,Enabled:Enabled}' --output table\naws rds describe-db-parameter-groups --query 'DBParameterGroups[].DBParameterGroupName' --output text | head -5 | xargs -I {} echo \"Parameter Group: {} - Check event subscriptions manually\"",
  "Check if RDS instances are using non-default ports.": "# Check RDS instances for non-default ports\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,Engine:Engine,Port:DbInstancePort}' | jq '.[] | select((.Engine == \"mysql\" and .Port == 3306) or (.Engine == \"postgres\" and .Port == 5432) or (.Engine == \"oracle\" and .Port == 1521) or (.Engine == \"sqlserver\" and .Port == 1433))'\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,Engine:Engine,Port:DbInstancePort}' --output table",
  "Check if RDS instances has enhanced monitoring enabled.": "# Check RDS enhanced monitoring configuration\naws rds describe-db-instances --query 'DBInstances[].{DBInstanceIdentifier:DBInstanceIdentifier,MonitoringInterval:MonitoringInterval,MonitoringRoleArn:MonitoringRoleArn}' | jq '.[] | select(.MonitoringInterval == null or .MonitoringInterval == 0)'\naws rds describe-db-instances --query 'DBInstances[?MonitoringInterval==null || MonitoringInterval==`0`].{DBInstanceIdentifier:DBInstanceIdentifier,Engine:Engine}' --output table",
  "Check if S3 buckets have Object-level logging for read events is enabled in CloudTrail.": "# Check CloudTrail S3 object-level read logging\naws cloudtrail get-event-selectors --trail-name $(aws cloudtrail describe-trails --query 'trailList[0].Name' --output text) --query 'EventSelectors[].DataResources[?Type==`AWS::S3::Object`].{Type:Type,Values:Values,IncludeManagementEvents:IncludeManagementEvents}' 2>/dev/null\naws cloudtrail describe-trails --query 'trailList[].{Name:Name,EventSelectors:EventSelectors}' | head -3",
  "Check if S3 buckets have Object-level logging for write events is enabled in CloudTrail.": "# Check CloudTrail S3 object-level write logging\naws cloudtrail get-event-selectors --trail-name $(aws cloudtrail describe-trails --query 'trailList[0].Name' --output text) --query 'EventSelectors[].DataResources[?Type==`AWS::S3::Object`].{Type:Type,Values:Values,ReadWriteType:ReadWriteType}' 2>/dev/null\naws logs filter-log-events --log-group-name CloudTrail/S3DataEvents --filter-pattern '{ $.eventSource = s3.* && $.eventName = Put* }' --start-time $(date -d '7 days ago' +%s)000 --query 'events[].eventName' | head -5 2>/dev/null",
  "Check if S3 buckets have a Lifecycle configuration enabled": "# Check S3 bucket lifecycle configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-lifecycle-configuration --bucket {} --query Rules 2>/dev/null || echo \"No lifecycle configuration\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-lifecycle-configuration --bucket {} 2>/dev/null",
  "Check if S3 buckets have object lock enabled": "# Check S3 bucket object lock configuration\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-object-lock-configuration --bucket {} --query ObjectLockConfiguration 2>/dev/null || echo \"Object lock not enabled\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-object-lock-configuration --bucket {} --query 'ObjectLockConfiguration.ObjectLockEnabled' --output text 2>/dev/null",
  "Check if S3 buckets use cross region replication.": "# Check S3 bucket cross-region replication\naws s3api list-buckets --query 'Buckets[].Name' --output text | head -5 | xargs -I {} sh -c 'echo \"Bucket: {}\" && aws s3api get-bucket-replication --bucket {} --query ReplicationConfiguration 2>/dev/null || echo \"No replication configured\"'\naws s3api list-buckets --query 'Buckets[:3].Name' --output text | xargs -I {} aws s3api get-bucket-replication --bucket {} 2>/dev/null",
  "Check if a Premium support plan is subscribed": "# Manual: Check AWS Support plan subscription\n# Navigate to: AWS Console > Support > Support Center > Your support plan\necho \"Manual check required: Login to AWS Console > Support > Support Center to verify Premium Support plan subscription\"\naws support describe-severity-levels --query 'severityLevels[].{code:code,name:name}' 2>/dev/null || echo \"Premium Support API access required\"",
  "ECS task definitions containers should have a logging configured with non blocking mode": "# Check ECS task definition logging configuration for non-blocking mode\naws ecs list-task-definition-families --query 'families[]' --output text | head -3 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[].{name:name,logConfiguration:logConfiguration}' | jq '.[] | select(.logConfiguration != null) | {name: .name, logDriver: .logConfiguration.logDriver, options: .logConfiguration.options}'\naws ecs list-task-definitions --query 'taskDefinitionArns[]' --output text | head -3 | xargs -I {} aws ecs describe-task-definition --task-definition {} --query 'taskDefinition.containerDefinitions[].logConfiguration.options.\"mode\"' 2>/dev/null",
  "Ensure AWS Backup vaults exist": "# Check for AWS Backup vaults and plans\naws backup list-backup-vaults --query 'BackupVaultList[].{BackupVaultName:BackupVaultName,CreationDate:CreationDate}'\naws backup list-backup-plans --query 'BackupPlansList[].{BackupPlanId:BackupPlanId,BackupPlanName:BackupPlanName}'\naws backup list-protected-resources --query 'Results[].{ResourceArn:ResourceArn,ResourceType:ResourceType}' | head -5",
  "Ensure AWS Lambda Functions Are Deployed Inside a VPC": "# Check Lambda functions VPC configuration\naws lambda list-functions --query 'Functions[].{FunctionName:FunctionName,VpcConfig:VpcConfig}' | jq '.[] | select(.VpcConfig == null or .VpcConfig == {})'\naws lambda list-functions --query 'Functions[?VpcConfig==null || VpcConfig==`{}`].{FunctionName:FunctionName,Runtime:Runtime}' --output table",
  "Ensure CloudTrail Insight is enabled": "# Check CloudTrail Insights configuration\naws cloudtrail describe-trails --query 'trailList[].Name' --output text | head -3 | xargs -I {} aws cloudtrail get-insight-selectors --trail-name {} --query 'InsightSelectors[].InsightType' 2>/dev/null\naws cloudtrail describe-trails --query 'trailList[].{Name:Name,HasInsightSelectors:HasInsightSelectors}' --output table",
  "Ensure CloudTrail trails are integrated with CloudWatch Logs": "# Check CloudTrail integration with CloudWatch Logs\naws cloudtrail describe-trails --query 'trailList[].{Name:Name,CloudWatchLogsLogGroupArn:CloudWatchLogsLogGroupArn}' | jq '.[] | select(.CloudWatchLogsLogGroupArn == null)'\naws cloudtrail describe-trails --query 'trailList[?CloudWatchLogsLogGroupArn==null].Name' --output text",
  "Ensure IAM policies are attached only to groups or roles": "# Check IAM policies attached directly to users\naws iam list-users --query 'Users[].UserName' --output text | head -5 | xargs -I {} sh -c 'echo \"User: {}\" && aws iam list-attached-user-policies --user-name {} --query AttachedPolicies[].PolicyName --output text 2>/dev/null'\naws iam list-users --query 'Users[].UserName' --output text | head -5 | xargs -I {} aws iam list-user-policies --user-name {} --query PolicyNames --output text 2>/dev/null",
  "Ensure SSM Incidents is enabled with response plans.": "# Check Systems Manager Incident Manager configuration\naws ssm-incidents list-response-plans --query 'responsePlanSummaries[].{name:name,arn:arn}' --output table 2>/dev/null || echo \"SSM Incident Manager may not be enabled\"\naws ssm-incidents get-replication-set --arn $(aws ssm-incidents list-replication-sets --query 'replicationSetArns[0]' --output text) --query 'replicationSet.{status:status,regionMap:regionMap}' 2>/dev/null",
  "Ensure there are no Security Groups not being used.": "# Check for unused security groups\naws ec2 describe-security-groups --query 'SecurityGroups[].{GroupId:GroupId,GroupName:GroupName}' --output text | while read groupid groupname; do if ! aws ec2 describe-instances --filters Name=instance.group-id,Values=$groupid --query 'Reservations[].Instances[]' 2>/dev/null | jq -e '.[0]' >/dev/null && ! aws ec2 describe-network-interfaces --filters Name=group-id,Values=$groupid --query 'NetworkInterfaces[0]' --output text 2>/dev/null | grep -q eni; then echo \"Unused: $groupid $groupname\"; fi; done | head -10\naws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].GroupId' --output text | head -5 | xargs -I {} aws ec2 describe-instances --filters Name=instance.group-id,Values={} --query 'length(Reservations[].Instances[])'"
}